{"version":3,"sources":["lib/mobx/weatherStore.js","lib/Provider.js","hooks/useStore.js","api/api.js","hooks/useWeather.js","components/Loading.js","components/CurrentWeather.js","components/Filter.js","components/Day.js","components/Forecast.js","components/Head.js","pages/index.js","app.js","lib/react-query/query-client.js","index.js"],"names":["store","constructor","type","minTemperature","maxTemperature","isFiltered","selectedDayId","this","filteredDays","computedFn","days","filter","day","isCorrectType","isCorrectMinTemperature","String","temperature","isCorrectMaxTemperature","makeAutoObservable","rootStore","autoBind","setType","setMinTemperature","temp","setMaxTemperature","applyFilter","isFormBlocked","setSelectedDayId","id","resetFilter","Context","createContext","Provider","props","value","children","useStore","useContext","api","Object","freeze","async","data","axios","get","useWeather","query","useQuery","getWeather","isFetched","Loading","style","color","fontSize","CurrentWeather","observer","currentDay","find","humidity","rain_probability","className","Filter","onClick","htmlFor","disabled","onChange","event","target","Day","format","Date","Forecast","weatherList","setWeatherList","useState","useEffect","weather","DayJSX","slice","map","length","Head","setCurrentDay","selectedDay","MainPage","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","configure","enforceActions","computedRequiresReaction","observableRequiresReaction","reactionRequiresObservable","render","client","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.78a603ec.chunk.js","sourcesContent":["// Core\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { computedFn } from \"mobx-utils\";\n\nexport class WeatherStore {\n    type = \"\";\n    minTemperature = \"\";\n    maxTemperature = \"\";\n    isFiltered = false;\n    selectedDayId = \"\";\n\n    constructor() {\n        this.filteredDays = computedFn((days) => {\n            const filteredDays = days.filter((day) => {\n                const isCorrectType = this.type ? this.type === day.type : true;\n                const isCorrectMinTemperature = this.minTemperature\n                    ? this.minTemperature <= String(day.temperature)\n                    : true;\n                const isCorrectMaxTemperature = this.maxTemperature\n                    ? this.maxTemperature >= String(day.temperature)\n                    : true;\n\n                return (\n                    isCorrectType &&\n                    isCorrectMinTemperature &&\n                    isCorrectMaxTemperature\n                );\n            });\n\n            return filteredDays;\n        });\n\n        makeAutoObservable(this, { rootStore: false }, { autoBind: true });\n    }\n\n    setType(type) {\n        this.type = type;\n    }\n\n\n    setMinTemperature(temp) {\n        this.minTemperature = temp;\n    }\n\n    setMaxTemperature(temp) {\n        this.maxTemperature = temp;\n    }\n\n    applyFilter(filter) {\n        if (filter.type) {\n            this.type = filter.type;\n        }\n\n        if (filter.minTemperature) {\n            this.minTemperature = filter.minTemperature;\n        }\n\n        if (filter.maxTemperature) {\n            this.maxTemperature = filter.maxTemperature;\n        }\n\n        this.isFiltered = true;\n    }\n\n    get isFormBlocked() {\n        return (\n            this.type === \"\" &&\n            this.minTemperature === \"\" &&\n            this.maxTemperature === \"\"\n        );\n    }\n\n    setSelectedDayId(id) {\n        this.selectedDayId = id;\n    }\n\n    resetFilter() {\n        this.maxTemperature = \"\";\n        this.minTemperature = \"\";\n        this.type = \"\";\n        this.isFiltered = false;\n    }\n}\n\nexport const store = new WeatherStore();\n","// Core\nimport { createContext } from 'react';\n\n// Store\nimport { store } from './mobx';\n\nexport const Context = createContext(store);\n\nexport const Provider = (props) => {\n    return (\n        <Context.Provider value = { store }>\n            { props.children }\n        </Context.Provider>\n    );\n};\n","import { useContext } from \"react\";\r\nimport { Context } from \"../lib/Provider\";\r\n\r\nexport const useStore = () => {\r\n    const store = useContext(Context);\r\n\r\n    return store;\r\n};\r\n","// Core\nimport axios from \"axios\";\n\nconst WEATHER_API_URL = process.env.REACT_APP_WEATHER_API_URL;\n\nexport const api = Object.freeze({\n    async getWeather() {\n        const { data } = await axios.get(`${WEATHER_API_URL}/rtx/api/forecast`);\n\n        return data.data;\n    },\n});\n","import { useQuery } from \"react-query\";\r\n\r\nimport { api } from \"../api\";\r\n\r\nexport const useWeather = () => {\r\n    const query = useQuery(\"weather\", api.getWeather);\r\n    const { data, isFetched } = query;\r\n\r\n    return {\r\n        data: data || [{}],\r\n        isFetched,\r\n    };\r\n};\r\n","export const Loading = () => {\r\n    return <span style={{ color: \"#fff\", fontSize: \"25px\" }}>Loading...</span>;\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useStore, useWeather } from \"../hooks\";\r\nimport { Loading } from \"./Loading\";\r\n\r\nexport const CurrentWeather = observer(() => {\r\n    const { selectedDayId } = useStore();\r\n    const { data, isFetched } = useWeather();\r\n\r\n    const currentDay = data.find((day) => day.id === selectedDayId);\r\n\r\n    const { temperature, humidity, rain_probability } = currentDay || {};\r\n\r\n    return (\r\n        <>\r\n            {selectedDayId ? (\r\n                <div className=\"current-weather\">\r\n                    <p className=\"temperature\">\r\n                        {isFetched ? temperature : <Loading />}\r\n                    </p>\r\n                    <p className=\"meta\">\r\n                        <span className=\"rainy\">%{rain_probability}</span>\r\n                        <span className=\"humidity\">%{humidity}</span>\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useStore, useWeather } from \"../hooks\";\r\n\r\nexport const Filter = observer(() => {\r\n    const store = useStore();\r\n    const { type, isFiltered, minTemperature, maxTemperature, isFormBlocked } =\r\n        store;\r\n\r\n    return (\r\n        <div className=\"filter\">\r\n            <span\r\n                onClick={() => !isFiltered && store.setType(\"cloudy\")}\r\n                className={`checkbox ${type === \"cloudy\" ? \"selected\" : \"\"} ${\r\n                    isFiltered ? \"blocked\" : \"\"\r\n                }`}\r\n            >\r\n                Cloudy\r\n            </span>\r\n            <span\r\n                className={`checkbox ${type === \"sunny\" ? \"selected\" : \"\"} ${\r\n                    isFiltered ? \"blocked\" : \"\"\r\n                }`}\r\n                onClick={() => !isFiltered && store.setType(\"sunny\")}\r\n            >\r\n                Sunny\r\n            </span>\r\n            <p className=\"custom-input\">\r\n                <label htmlFor=\"min-temperature\">minimum temperature</label>\r\n                <input\r\n                    value={minTemperature}\r\n                    id=\"min-temperature\"\r\n                    type=\"number\"\r\n                    disabled={isFiltered}\r\n                    onChange={(event) =>\r\n                        store.setMinTemperature(event.target.value)\r\n                    }\r\n                />\r\n            </p>\r\n            <p className=\"custom-input\">\r\n                <label htmlFor=\"max-temperature\">maximum temperature</label>\r\n                <input\r\n                    value={maxTemperature}\r\n                    id=\"max-temperature\"\r\n                    type=\"number\"\r\n                    disabled={isFiltered}\r\n                    onChange={(event) =>\r\n                        store.setMaxTemperature(event.target.value)\r\n                    }\r\n                />\r\n            </p>\r\n            {isFiltered ? (\r\n                <button type=\"submit\" onClick={() => store.resetFilter()}>\r\n                    Reset\r\n                </button>\r\n            ) : (\r\n                <button\r\n                    type=\"submit\"\r\n                    disabled={isFormBlocked}\r\n                    onClick={() =>\r\n                        store.applyFilter({\r\n                            type,\r\n                            minTemperature,\r\n                            maxTemperature,\r\n                        })\r\n                    }\r\n                >\r\n                    Filter out\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../hooks/useStore\";\r\n\r\nexport const Day = observer((props) => {\r\n    const { selectedDayId, setSelectedDayId } = useStore();\r\n\r\n    const handleClick = () => {\r\n        setSelectedDayId(props.id);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onClick={handleClick}\r\n            className={`day ${props.type} ${\r\n                props.id === selectedDayId ? \"selected\" : \"\"\r\n            }`}\r\n        >\r\n            <p>{format(new Date(props.day), \"EEEE\")}</p>\r\n            <span>{props.temperature}</span>\r\n        </div>\r\n    );\r\n});\r\n","/* eslint-disable no-nested-ternary */\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useStore } from \"../hooks/useStore\";\r\n\r\nimport { useWeather } from \"../hooks/useWeather\";\r\nimport { Day } from \"./Day\";\r\nimport { Loading } from \"./Loading\";\r\n\r\nexport const Forecast = observer(() => {\r\n    const { data, isFetched } = useWeather();\r\n    const { setSelectedDayId, isFiltered, filteredDays, selectedDayId } =\r\n        useStore();\r\n\r\n    const [weatherList, setWeatherList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (isFetched) {\r\n            const weather = isFiltered ? filteredDays(data) : data;\r\n            setWeatherList(weather);\r\n            setSelectedDayId(weather[0]?.id || \"\");\r\n        }\r\n    }, [isFiltered, isFetched]);\r\n\r\n    const DayJSX =\r\n        isFetched &&\r\n        weatherList.slice(0, 7).map((day) => <Day key={day.id} {...day} />);\r\n\r\n    return (\r\n        <div className=\"forecast\">\r\n            {DayJSX.length > 0 ? (\r\n                DayJSX\r\n            ) : (\r\n                <p className=\"message\"> No days were found for this filter</p>\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { format } from \"date-fns\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useStore, useWeather } from \"../hooks\";\r\nimport { Loading } from \"./Loading\";\r\n\r\nexport const Head = observer(() => {\r\n    const { selectedDayId } = useStore();\r\n    const { data, isFetched } = useWeather();\r\n    const [currentDay, setCurrentDay] = useState();\r\n\r\n    useEffect(() => {\r\n        if (selectedDayId) {\r\n            const selectedDay =\r\n                isFetched && data.find((day) => day.id === selectedDayId);\r\n            setCurrentDay(selectedDay);\r\n        }\r\n    }, [selectedDayId]);\r\n\r\n    return (\r\n        <>\r\n            {selectedDayId ? (\r\n                <div className=\"head\">\r\n                    <div className={`icon ${currentDay?.type}`}></div>\r\n                    <div className=\"current-date\">\r\n                        <p>\r\n                            {currentDay &&\r\n                                format(new Date(currentDay?.day), \"eeee\")}\r\n                        </p>\r\n                        <span>\r\n                            {currentDay &&\r\n                                format(new Date(currentDay?.day), \"dd MMMM\")}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </>\r\n    );\r\n});\r\n","import { Filter, Forecast, CurrentWeather, Head } from \"../components\";\n\nexport const MainPage = () => {\n    return (\n        <main>\n            <Filter />\n            <Head />\n            <CurrentWeather />\n            <Forecast />\n        </main>\n    );\n};\n","// Components\n\nimport { MainPage } from \"./pages\";\n\n// Instruments\n\nexport const App = () => {\n    return <MainPage />;\n};\n","// Core\nimport { QueryClient } from 'react-query';\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n        },\n    },\n});\n","// Core\nimport { render } from \"react-dom\";\nimport { QueryClientProvider } from \"react-query\";\nimport { configure } from \"mobx\";\n\n// Components\nimport { App } from \"./app\";\nimport { Provider } from \"./lib/Provider\";\n\n// Instruments\nimport \"./theme/index.scss\";\nimport { queryClient } from \"./lib/react-query\";\n\nconfigure({\n    enforceActions: \"always\",\n    computedRequiresReaction: true,\n    observableRequiresReaction: true,\n    reactionRequiresObservable: true,\n});\n\nrender(\n    <Provider>\n        <QueryClientProvider client={queryClient}>\n            <App />\n        </QueryClientProvider>\n    </Provider>,\n    document.getElementById(\"root\"),\n    () => {\n        // eslint-disable-next-line no-console\n        console.log(\n            \"%c Приложение успешно запущено \",\n            \"background: #00ff00; color: #000000; padding: 2.5px;\"\n        );\n    }\n);\n"],"sourceRoot":""}